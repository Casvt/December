{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"December Documentation Hub","text":"<p>An automatic file transcoder following the rules you set.</p> <p>Set up processes for media and subtitles files that will be applied to all files entering the queue. It's up to you how much or little you want to do. December even supports automatically adding files to the queue after they've been downloaded using Radarr or Sonarr, and has integrations with Bazarr and Plex. A plugin system is available so that you can even write or download custom actions.</p>"},{"location":"#contact","title":"Contact","text":"<ul> <li>A discord server is available</li> <li>Make an issue on GitHub.</li> </ul>"},{"location":"actions/","title":"Actions","text":"<p>The actions are what actually do something with the files. There are a few default actions included in December, but you can also write your own.</p>"},{"location":"actions/#writing-your-own-actions","title":"Writing your own actions","text":"<p>The file containing your action(s) needs to be in the <code>backend/actions</code> folder. The action class needs to inherit from <code>backend.actions.general_actions.Action</code>. It needs to have a doc string describing the action. The class variable <code>var_class</code> needs to be set to either the dataclass for the action's settings or to <code>None</code>. If the action requires settings, then make a class that inherits from <code>backend.actions.general_actions.ActionVars</code> and is also a dataclass. The <code>run</code> method receives the <code>files</code> variable which is a list of filenames and should return this list, potentially with changes depending on what the action does. You can not make an instance of the <code>backend.config.Config</code> class in the initialiser of the class; that has to be done in the <code>run</code> method instead. A template can be found below:</p> <pre><code>#-*- coding: utf-8 -*-\n\n\"\"\"\nFile: backend/actions/my_action.py\nAction specifier: \"my_action.MyAction\"\n\"\"\"\n\nfrom dataclasses import dataclass\n\nfrom backend.actions.general_actions import Action, ActionVars\nfrom backend.config import Config\n\n@dataclass\nclass MyActionVars(ActionVars):\n    my_var: str\n    \"My description of my_var\"\n\nclass MyAction(Action):\n    \"\"\"\n    My description of MyAction.\n    \"\"\"\n\n    var_class = MyActionVars\n\n    def __init__(self, vars: MyActionVars) -&gt; None:\n        self.vars = vars\n        return\n\n    def run(self, files: List[str]) -&gt; List[str]:\n        self.config = Config().config\n\n        # DO THIS AND THAT AND BOOM AND BAM\n\n        return files\n</code></pre>"},{"location":"config/","title":"Config","text":"<p>In the config file is specified what the process is and all the accompanying needed settings. It's in the JSON format.</p>"},{"location":"config/#setting-up-a-config-file","title":"Setting up a config file.","text":"<p>First make the file, with a name like <code>December.config.json</code>. Paste the following into it:</p> <pre><code>{\n    \"logging_level\": \"info\",\n\n    \"ffmpeg\": \"./bin/ffmpeg\",\n    \"ffprobe\": \"./bin/ffprobe\",\n\n    \"log_file\": \"./December.log\",\n    \"queue_file\": \"./December.queue\",\n    \"error_file\": \"./December.error\",\n\n    \"check_interval\": 30,\n\n    \"plex_base_url\": \"\",\n    \"plex_api_token\": \"\",\n\n    \"sonarr_base_url\": \"\",\n    \"sonarr_api_token\": \"\",\n\n    \"radarr_base_url\": \"\",\n    \"radarr_api_token\": \"\",\n\n    \"bazarr_base_url\": \"\",\n    \"bazarr_api_token\": \"\",\n\n    \"media_process\": [\n\n    ],\n\n    \"subtitle_process\": [\n\n    ]\n}\n</code></pre> <p>If you're running on Windows, you have to do two things:</p> <ol> <li>Replace the <code>/</code> with <code>\\</code> in the file.</li> <li>Download FFMPEG and FFPROBE, then supply the paths to the executables to the <code>ffmpeg</code> and <code>ffprobe</code> setting respectively.</li> </ol> <p>If possible, supply values for as many of the services as possible, as it enables access to more actions.</p> <p>The values for <code>media_process</code> and <code>subtitle_process</code> describe the processes for the files. Each action is an object with the <code>action</code> key giving the identifier of the action and the <code>vars</code> key giving an object with action-specific settings. See an example below:</p> <pre><code>{\n    \"logging_level\": \"info\",\n\n    \"ffmpeg\": \"./bin/ffmpeg\",\n    \"ffprobe\": \"./bin/ffprobe\",\n\n    \"log_file\": \"./December.log\",\n    \"queue_file\": \"./December.queue\",\n    \"error_file\": \"./December.error\",\n\n    \"check_interval\": 5,\n\n    \"plex_base_url\": \"http://192.168.2.15:32400\",\n    \"plex_api_token\": \"abcdefghijk\",\n\n    \"sonarr_base_url\": \"http://192.168.2.15:8005\",\n    \"sonarr_api_token\": \"abcdefghijk\",\n\n    \"radarr_base_url\": \"http://192.168.2.15:8006\",\n    \"radarr_api_token\": \"abcdefghijk\",\n\n    \"bazarr_base_url\": \"http://192.168.2.15:8009\",\n    \"bazarr_api_token\": \"abcdefghijk\",\n\n    \"media_process\": [\n        {\n            \"action\": \"media_actions.MediaExtractSubs\",\n            \"vars\": {\n                \"codec\": \"srt\",\n                \"language_tag\": true,\n                \"extract_unknown_language\": true,\n                \"remove_from_media\": false,\n                \"extract_languages\": [\"en\", \"nl\"],\n                \"extract_codecs\": [\"subrip\"],\n                \"exclude_versions\": [\"sdh\", \"forced\"]\n            }\n        },\n        {\n            \"action\": \"subtitle_actions.SubRemoveAds\",\n            \"vars\": {}\n        },\n        {\n            \"action\": \"subtitle_actions.SubClone\",\n            \"vars\": {\n                \"target_versions\": [\"ass\", \"srt\"],\n                \"replace_existing\": true\n            }\n        },\n        {\n            \"action\": \"media_actions.MediaTranscode\",\n            \"vars\": {\n                \"video\": {\n                    \"keep_video\": true,\n                    \"codec\": \"hevc_nvenc\",\n                    \"force_transcode\": false,\n                    \"preset\": \"p7\"\n                },\n                \"audio\": {\n                    \"keep_audio\": true,\n                    \"codec\": \"libfdk_aac\",\n                    \"force_transcode\": false,\n                    \"keep_unknowns\": true,\n                    \"keep_commentary\": false,\n                    \"keep_languages\": [\"en\"],\n                    \"keep_original_language\": true,\n                    \"keep_duplicates\": false,\n                    \"on_no_matches\": \"avoid_commentary\",\n                    \"create_channels\": [\"2.0\"]\n                },\n                \"subtitle\": {\n                    \"keep_subtitle\": false,\n                    \"keep_unknowns\": true\n                },\n                \"general\": {\n                    \"keep_metadata\": false,\n                    \"keep_poster\": false\n                }\n            }\n        },\n        {\n            \"action\": \"external_actions.BazarrCommonFixes\",\n            \"vars\": {}\n        },\n        {\n            \"action\": \"external_actions.PlexScan\",\n            \"vars\": {}\n        }\n    ],\n\n    \"subtitle_process\": [\n        {\n            \"action\": \"subtitle_actions.SubRemoveAds\",\n            \"vars\": {}\n        },\n        {\n            \"action\": \"subtitle_actions.SubClone\",\n            \"vars\": {\n                \"target_versions\": [\"ass\", \"srt\"],\n                \"replace_existing\": true\n            }\n        },\n        {\n            \"action\": \"external_actions.BazarrCommonFixes\",\n            \"vars\": {}\n        },\n        {\n            \"action\": \"external_actions.PlexScan\",\n            \"vars\": {}\n        }\n    ]\n}\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation_1","title":"Installation","text":"LinuxWindows <pre><code>sudo apt-get install git python3-pip\nsudo git clone https://github.com/Casvt/December.git /opt/December\ncd /opt/December\npython3 -m pip install -r requirements.txt\n</code></pre> <p>Now set up your config file. Once you've done that, use the following command to run December (replace <code>/path/to/config.json</code> with the correct path).</p> <pre><code>python3 December.py -c \"/path/to/config.json\"\n</code></pre> <p>On Windows, there are a couple of extra steps involved.  </p> <ol> <li>Download and instal Python. This is the framework MIND runs on top of. Make sure you select to add Python to PATH when prompted. This will make installing requirements much easier.</li> <li>Download (or clone) the latest December release.  </li> <li>Extract the zip file to a folder on your machine.    We suggest something straightforward - <code>C:\\apps\\December</code> is what we'll use as an example.</li> <li>Instal the required python modules (found in <code>requirements.txt</code>).    This can be done from a command prompt, by changing to the folder you've extracted December to and running a python command.     <pre><code>cd C:\\apps\\December\npython -m pip install -r requirements.txt\n</code></pre></li> </ol> <p>Now set up your config file. Once you've done that, use the following command to run December (replace <code>C:\\path\\to\\config.json</code> with the correct path).</p> <pre><code>python December.py -c \"C:\\path\\to\\config.json\"\n</code></pre>"},{"location":"installation/#usage","title":"Usage","text":"<p>Once December is running, you can start transcoding files. Add filepaths to the queue file one by one and December will handle them. You can also make Radarr and/or Sonarr automatically add the filepath of a newly downloaded file to the queue file.</p> <p>To set that up, first create a new file that will run the command.</p> LinuxWindows <ol> <li>Create a bash file, e.g. <code>/opt/December/connect.sh</code>.</li> <li>Give it the following content, and replace the paths with the correct values. <pre><code>#!/bin/bash\n\ncd /opt/December\npython3 December.py -c /path/to/config.json\n</code></pre></li> </ol> <ol> <li>Create a bat file, e.g. <code>C:\\apps\\December\\connect.bat</code></li> <li>Give it the following content, and replace the paths with the correct values. <pre><code>python \"C:\\apps\\December\\December.py\" -c \"C:\\path\\to\\config.json\"\n</code></pre></li> </ol> <p>Now setup Radarr/Sonarr to run the script.</p> <ol> <li>In either Radarr or Sonarr, go to Settings -&gt; Connect -&gt; <code>+</code> -&gt; Custom Script.</li> <li>Select \"On Import\" and \"On Upgrade\".</li> <li>For the \"Path\", give the path to the script that we just created. E.g. <code>/opt/December/connect.sh</code>.</li> <li>Click \"Save\".</li> </ol>"}]}